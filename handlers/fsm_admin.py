from aiogram import types, Dispatcher
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Text
from aiogram.dispatcher.filters.state import State, StatesGroup
from config import bot
from keyboard.client_cb import menu_markup, cancel_markup
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton


class FSMAdmin(StatesGroup):
    photo = State()
    name = State()
    type = State()
    price = State()
    description = State()


async def fsm_start(message: types.Message):
    if message.chat.type == 'private':
        await FSMAdmin.photo.set()
        await message.answer(f'–ß–µ —Ç–∞–∞–∞–º {message.from_user.username}?')
        await message.answer(f'–§–æ—Ç–∫—É –±–ª—é–¥–∞ –Ω–∞ –±–∞–∑—É üñºÔ∏è', reply_markup=cancel_markup)
    else:
        await message.answer('–ú–∞–ª—Å—ã–Ω–±—ã –≤ –≥—Ä—É–ø–ø–µ –º–µ–Ω—é –ø—Ä–∏–¥—É–º—ã–≤–∞—Ç—å üò§')


id = 0


async def load_photo(message: types.Message, state: FSMContext):
    global id
    async with state.proxy() as data:
        data['id'] = id
        id += 1
        data['photo'] = message.photo[0].file_id
    await FSMAdmin.next()
    await message.answer('–≠–º–∏ –Ω–∞–∑–≤–∞–Ω–∏—è –±–ª—é–¥–∞ –Ω–∞–¥–æ ‚úí', reply_markup=cancel_markup)


async def load_name(message: types.Message, state: FSMContext):
    try:
        if len(message.text) > 20:
            raise ValueError
        async with state.proxy() as data:
            data['name'] = message.text
        await FSMAdmin.next()
        await message.answer('–ù—É–∂–Ω–æ —Ç–µ–ø–µ—Ä—å –≤—ã–±—Ä–∞—Ç—å —Ç–∏–ø', reply_markup=menu_markup)
    except:
        await message.answer('–ö–∞–∫ –≥–æ—Å—Ç—å –±—É–¥–µ—Ç —ç—Ç–æ —á–∏—Ç–∞—Ç—å ü§¨')

async def load_type(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['type'] = message.text
    await FSMAdmin.next()
    await message.answer('–¢–µ–ø–µ—Ä—å —Ü–µ–Ω–∞ —Å–∏–µ —à–µ–¥–µ–≤—Ä–∞ —Ä–∞–≤–Ω–∞ üí∏', reply_markup=cancel_markup)


async def load_price(message: types.Message, state: FSMContext):
    try:
        price = int(message.text)
        if price <= 0:
            raise ValueError
        if price > 1000:
            raise AttributeError
        async with state.proxy() as data:
            data['price'] = str(price)+" —Å–æ–º"
        await FSMAdmin.next()
        skip_button = KeyboardButton("–õ–µ–Ω—å –ø—Ä–∏–¥—É–º—ã–≤–∞—Ç—å")
        skip_markup = ReplyKeyboardMarkup(
            resize_keyboard=True,
            one_time_keyboard=True
        ).add(skip_button)
        await message.answer('–û–ø–∏—Å–∞–Ω–∏–µ –∫–µ—Ä–µ–∫—Ç–∞', reply_markup=skip_markup)
    except TypeError:
        await message.answer('–ú–∞–ª –Ω–æ—Ä–º–∞–ª—å–Ω–æ –ø–∏—à–∏')
    except ValueError:
        await message.answer("–¢–∞–∫–æ–π —Ü–µ–Ω—ã –Ω–µ –±—ã–≤–∞–µ—Ç")
    except AttributeError:
        await message.answer("–ê–Ω–¥–∞ –∞–∫—á–∞ –±–æ–ª–±–æ–π—Ç –±–∏–∑–¥–µ")


async def load_description(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['description'] = message.text
        await bot.send_photo(message.from_user.id, data['photo'],
                       caption=f"–ú—ã–Ω–∞ —Å–∞–≥–∞ —â–µ–¥–µ–≤—Ä:\n{data['name']}, {data['type']} —Å—Ç–æ–∏—Ç: {data['price']}\n"
                               f"{data['description']}")
    await state.finish()
    await message.answer('–ñ–∞—Ä–∞–π—Å—ã–Ω –∂–∏–≥–∞—Ä!')


async def cancel_menu_reg(message: types.Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state is not None:
        await state.finish()
        await message.answer('–ù—É –∏ –ø–æ—à–µ–ª —Ç—ã')


def register_handlers_fsm_admin(dp: Dispatcher):
    dp.register_message_handler(cancel_menu_reg, state='*', commands=['cancel'], commands_prefix='\!.')
    dp.register_message_handler(cancel_menu_reg,
                                Text(equals='cancel', ignore_case=True),state='*')
    dp.register_message_handler(fsm_start, commands=['reg'])
    dp.register_message_handler(load_photo, state=FSMAdmin.photo, content_types=['photo'])
    dp.register_message_handler(load_name, state=FSMAdmin.name)
    dp.register_message_handler(load_type, state=FSMAdmin.type)
    dp.register_message_handler(load_price, state=FSMAdmin.price)
    dp.register_message_handler(load_description, state=FSMAdmin.description)
